# Generated by Django 5.2.5 on 2025-08-31 16:07

import django.contrib.gis.db.models.fields
import django.contrib.gis.geos.point
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CentreVidange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, verbose_name='nom du centre')),
                ('position', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='position géographique')),
                ('actif', models.BooleanField(default=False, verbose_name='actif')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date de création')),
            ],
            options={
                'verbose_name': 'centre de vidange',
                'verbose_name_plural': 'centres de vidange',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Vidangeur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_moyenne', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='note moyenne')),
                ('nombre_notes', models.PositiveIntegerField(default=0, verbose_name='nombre de notes')),
                ('statut', models.CharField(choices=[('DISPONIBLE', 'Disponible'), ('EN_MISSION', 'En mission'), ('INDISPONIBLE', 'Indisponible')], default='DISPONIBLE', max_length=20, verbose_name='statut')),
                ('position_actuelle', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='position actuelle')),
                ('date_derniere_localisation', models.DateTimeField(blank=True, null=True, verbose_name='dernière localisation')),
                ('actif', models.BooleanField(default=True, verbose_name='actif')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date de création')),
                ('date_maj', models.DateTimeField(auto_now=True, verbose_name='date de mise à jour')),
            ],
            options={
                'verbose_name': 'vidangeur',
                'verbose_name_plural': 'vidangeurs',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('phone_number', models.CharField(max_length=20, unique=True, verbose_name='téléphone')),
                ('role', models.CharField(choices=[('USAGER', 'Usager'), ('VIDANGEUR_MEC', 'Vidangeur (Mécanique)'), ('VIDANGEUR_MAN', 'Vidangeur (Manuelle)'), ('PROPRIETAIRE', 'Propriétaire'), ('ADMIN', 'Administrateur')], max_length=20, verbose_name='rôle')),
                ('is_active', models.BooleanField(default=True, verbose_name='actif')),
                ('is_staff', models.BooleanField(default=False, verbose_name='membre du staff')),
                ('is_available', models.BooleanField(default=True, verbose_name='disponible')),
                ('fcm_token', models.CharField(blank=True, max_length=255, null=True, verbose_name='token FCM')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="date d'inscription")),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='dernière connexion')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'utilisateur',
                'verbose_name_plural': 'utilisateurs',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_notification', models.CharField(choices=[('DEMANDE_RECUE', 'Nouvelle demande reçue'), ('DEMANDE_ACCEPTEE', 'Demande acceptée'), ('DEMANDE_REFUSEE', 'Demande refusée'), ('CHAUFFEUR_EN_ROUTE', 'Chauffeur en route'), ('CHAUFFEUR_ARRIVE', 'Chauffeur arrivé'), ('SERVICE_TERMINE', 'Service terminé'), ('NOUVELLE_DEMANDE', 'Nouvelle demande disponible'), ('ANNULATION', 'Annulation de service')], max_length=20, verbose_name='type')),
                ('titre', models.CharField(max_length=100, verbose_name='titre')),
                ('message', models.TextField(verbose_name='message')),
                ('lue', models.BooleanField(default=False, verbose_name='lue')),
                ('donnees', models.JSONField(blank=True, default=dict, verbose_name='données')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créée le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'notification',
                'verbose_name_plural': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Proprietaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adresse', models.TextField(blank=True, verbose_name='adresse complète')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mis à jour le')),
                ('nom_societe', models.CharField(max_length=100, verbose_name='nom de la société')),
                ('contact', models.CharField(max_length=100, verbose_name='contact')),
                ('verification_status', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('VERIFIE', 'Vérifié'), ('REJETE', 'Rejeté')], default='EN_ATTENTE', max_length=20, verbose_name='statut de vérification')),
                ('date_verification', models.DateTimeField(blank=True, null=True, verbose_name='date de vérification')),
                ('notes_verification', models.TextField(blank=True, verbose_name='notes de vérification')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur')),
            ],
            options={
                'verbose_name': 'propriétaire',
                'verbose_name_plural': 'propriétaires',
            },
        ),
        migrations.CreateModel(
            name='Signalisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_signalement', models.CharField(choices=[('COMPORTEMENT', 'Comportement inapproprié'), ('VEHICULE', 'Problème avec le véhicule'), ('AUTRE', 'Autre problème')], max_length=20, verbose_name='type')),
                ('description', models.TextField(verbose_name='description')),
                ('immatriculation', models.CharField(max_length=20, verbose_name='immatriculation')),
                ('localisation', models.TextField(blank=True, verbose_name='lieu')),
                ('signalant_telephone', models.CharField(max_length=20, verbose_name='téléphone')),
                ('signalant_nom', models.CharField(blank=True, max_length=100, verbose_name='nom')),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('TRAITE', 'Traité'), ('REJETE', 'Rejeté')], default='EN_ATTENTE', max_length=20, verbose_name='statut')),
                ('traite_le', models.DateTimeField(blank=True, null=True, verbose_name='traité le')),
                ('commentaire', models.TextField(blank=True, verbose_name='commentaire')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mis à jour le')),
                ('traite_par', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['ADMIN']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signalements_traites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'signalisation',
                'verbose_name_plural': 'signalisation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TarifCentreVidange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prix', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='prix')),
                ('actif', models.BooleanField(default=True, verbose_name='actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mis à jour le')),
                ('centre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tarifs_vidangeurs', to='ankavidangeapp.centrevidange')),
            ],
            options={
                'verbose_name': 'tarif centre-vidangeur',
                'verbose_name_plural': 'tarifs centre-vidangeur',
            },
        ),
        migrations.CreateModel(
            name='VidangeurManuel',
            fields=[
                ('vidangeur_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ankavidangeapp.vidangeur')),
                ('tarif_manuel', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='tarif (manuel)')),
            ],
            options={
                'verbose_name': 'vidangeur manuel',
                'verbose_name_plural': 'vidangeurs manuels',
            },
            bases=('ankavidangeapp.vidangeur',),
        ),
        migrations.CreateModel(
            name='VidangeurMecanique',
            fields=[
                ('vidangeur_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ankavidangeapp.vidangeur')),
                ('numero_permis', models.CharField(max_length=50, unique=True, verbose_name='numéro de permis')),
                ('immatriculation', models.CharField(max_length=20, unique=True, verbose_name='immatriculation')),
                ('marque', models.CharField(blank=True, max_length=100, null=True, verbose_name='marque')),
                ('modele', models.CharField(blank=True, max_length=100, null=True, verbose_name='modèle')),
                ('annee', models.PositiveIntegerField(blank=True, null=True, verbose_name='année de fabrication')),
                ('capacite', models.PositiveIntegerField(blank=True, null=True, verbose_name='capacité (en litres)')),
            ],
            options={
                'verbose_name': 'vidangeur mécanique',
                'verbose_name_plural': 'vidangeurs mécaniques',
            },
            bases=('ankavidangeapp.vidangeur',),
        ),
        migrations.AddField(
            model_name='vidangeur',
            name='user',
            field=models.OneToOneField(limit_choices_to={'role__in': ['VIDANGEUR_MEC', 'VIDANGEUR_MAN']}, on_delete=django.db.models.deletion.CASCADE, related_name='vidangeur', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur'),
        ),
        migrations.CreateModel(
            name='PositionGPS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', django.contrib.gis.db.models.fields.PointField(default=django.contrib.gis.geos.point.Point(0, 0), srid=4326, verbose_name='position géographique')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='horodatage')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('vidangeur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions_gps', to='ankavidangeapp.vidangeur', verbose_name='vidangeur')),
            ],
            options={
                'verbose_name': 'position GPS',
                'verbose_name_plural': 'positions GPS',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Demande',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_vidange', models.CharField(choices=[('MECANIQUE', 'Mécanique'), ('MANUELLE', 'Manuelle')], default='MECANIQUE', max_length=20, verbose_name='type de vidange')),
                ('date_demande', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date de la demande')),
                ('date_souhaitee', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date souhaitée')),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('VALIDE', 'Validée'), ('EN_COURS', 'En cours'), ('TERMINEE', 'Terminée'), ('ANNULEE', 'Annulée')], default='EN_ATTENTE', max_length=20, verbose_name='statut')),
                ('adresse', models.TextField(verbose_name='adresse de vidange')),
                ('volume_estime', models.CharField(choices=[('SIMPLE', 'Simple'), ('GRANDE', 'Grande')], default='SIMPLE', max_length=20, verbose_name='volume')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='budget')),
                ('note', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='note')),
                ('commentaire', models.TextField(blank=True, verbose_name='commentaire')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date de création')),
                ('date_maj', models.DateTimeField(auto_now=True, verbose_name='date de mise à jour')),
                ('reference', models.CharField(blank=True, max_length=32, unique=True, verbose_name='référence')),
                ('position', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='position géographique')),
                ('date_debut_intervention', models.DateTimeField(blank=True, null=True, verbose_name='début intervention')),
                ('date_fin_intervention', models.DateTimeField(blank=True, null=True, verbose_name='fin intervention')),
                ('date_debut', models.DateTimeField(blank=True, null=True, verbose_name='date début')),
                ('date_fin', models.DateTimeField(blank=True, null=True, verbose_name='date fin')),
                ('volume_traite', models.PositiveIntegerField(blank=True, null=True, verbose_name='volume traité (L)')),
                ('usager', models.ForeignKey(limit_choices_to={'role': 'USAGER'}, on_delete=django.db.models.deletion.CASCADE, related_name='demandes_vidange', to=settings.AUTH_USER_MODEL, verbose_name='usager')),
                ('vidangeur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demandes', to='ankavidangeapp.vidangeur', verbose_name='vidangeur affecté')),
            ],
            options={
                'verbose_name': 'demande de vidange',
                'verbose_name_plural': 'demandes de vidange',
                'ordering': ['-date_demande'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='ankavidange_role_0c333b_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_available'], name='ankavidange_is_avai_a1ddf3_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'lue'], name='ankavidange_user_id_9063b2_idx'),
        ),
        migrations.AddField(
            model_name='vidangeurmecanique',
            name='centres',
            field=models.ManyToManyField(blank=True, related_name='vidangeurs_m2m', through='ankavidangeapp.TarifCentreVidange', to='ankavidangeapp.centrevidange', verbose_name='centres de vidange'),
        ),
        migrations.AddField(
            model_name='vidangeurmecanique',
            name='proprietaire',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vidangeurs', to='ankavidangeapp.proprietaire', verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='tarifcentrevidange',
            name='vidangeur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tarifs_centres', to='ankavidangeapp.vidangeurmecanique'),
        ),
        migrations.AddIndex(
            model_name='vidangeur',
            index=models.Index(fields=['statut'], name='ankavidange_statut_a2f934_idx'),
        ),
        migrations.AddIndex(
            model_name='positiongps',
            index=models.Index(fields=['timestamp'], name='ankavidange_timesta_c32929_idx'),
        ),
        migrations.AddIndex(
            model_name='positiongps',
            index=models.Index(fields=['vidangeur', 'timestamp'], name='ankavidange_vidange_471866_idx'),
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['statut'], name='ankavidange_statut_6e802c_idx'),
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['type_vidange'], name='ankavidange_type_vi_6032af_idx'),
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['date_demande'], name='ankavidange_date_de_ce4933_idx'),
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['usager'], name='ankavidange_usager__1c5ff3_idx'),
        ),
        migrations.AddIndex(
            model_name='demande',
            index=models.Index(fields=['vidangeur'], name='ankavidange_vidange_797d24_idx'),
        ),
        migrations.AddIndex(
            model_name='tarifcentrevidange',
            index=models.Index(fields=['vidangeur', 'centre'], name='ankavidange_vidange_b84136_idx'),
        ),
        migrations.AddIndex(
            model_name='tarifcentrevidange',
            index=models.Index(fields=['actif'], name='ankavidange_actif_6f5372_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tarifcentrevidange',
            unique_together={('vidangeur', 'centre')},
        ),
    ]
